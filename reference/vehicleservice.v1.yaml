openapi: 3.0.0
info:
  title: VehicleService
  version: '1.0'
  contact:
    name: John Gray
    url: 'https://github.com/Cabista/API/issues'
    email: johnfg2610@gmail.com
  description: Stores information releated to specific vehicles owned by a business
servers:
  - url: 'https://localhost:8080/api/v1'
    description: Dev server
paths:
  '/vehicle/{ID}':
    get:
      summary: Get Vehicle by ID
      tags:
        - Vehicle
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: get-vehicle-new
      description: Gets a vehicle by the provided ID
      parameters: []
      security:
        - JWTAuth:
            - business_vehicle_view
    parameters:
      - schema:
          type: string
        name: ID
        in: path
        required: true
        description: The id used to refrence this vehicle
    put:
      summary: Update vehicle by ID
      operationId: put-vehicle-ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Updates a vehicle by ID
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleUpdateForm'
      security:
        - JWTAuth:
            - business_vehicle_edit
      tags:
        - Vehicle
    delete:
      summary: Delete vehicle by ID
      operationId: delete-vehicle-ID
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Deletes a vehicle by the provided ID
      parameters: []
      security:
        - JWTAuth:
            - business_vehicle_delete
      tags:
        - Vehicle
  /vehicle:
    get:
      summary: Get all vehicles
      tags:
        - Vehicle
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vehicle'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: get-vehicle
      description: Gets all vehicles that the authoised user is allowed to see
      parameters:
        - schema:
            type: string
          in: query
          name: limit
          description: The maximum ammount of vehicles to be returned
      security:
        - JWTAuth:
            - business_vehicle_list
    post:
      summary: Create new vehicle
      operationId: post-vehicle
      description: Creates a new vehicle resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleForm'
        description: A form used to create a new vehicle resource
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
      parameters: []
      security:
        - JWTAuth:
            - business_vehicle_
      tags:
        - Vehicle
  '/vehicle_type/{ID}':
    parameters:
      - schema:
          type: string
        name: ID
        in: path
        required: true
    get:
      summary: Get vehicle type by ID
      tags:
        - Vehicle type
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleType'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: get-vehicle_type-ID
      description: Get a vehicle by the provided ID
      security:
        - JWTAuth:
            - business_vehicle_type_view
    put:
      summary: Update vehicle type by id
      operationId: put-vehicle_type-ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleType'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      security:
        - JWTAuth:
            - business_vehicle_type_edit
      description: Update a vehicle by the provided ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleTypeUpdateForm'
      tags:
        - Vehicle type
    delete:
      summary: Delete vehicle by ID
      operationId: delete-vehicle_type-ID
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Delete a vehicle by the provided ID
      security:
        - JWTAuth:
            - business_vehicle_type_delete
      tags:
        - Vehicle type
  /vehicle_type:
    get:
      summary: Get all vehicles
      tags:
        - Vehicle type
      operationId: get-vehicle_type
      description: Gets all vehicles this user is allowed to see
      security:
        - JWTAuth:
            - business_vehicle_type_list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleType'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    post:
      summary: Create a vehicle
      operationId: post-vehicle_type
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      description: Create a new vehicle resource
      security:
        - JWTAuth:
            - business_vehicle_type_form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleTypeForm'
      tags:
        - Vehicle type
components:
  schemas:
    VehicleType:
      title: VehicleType
      type: object
      description: The specification of a vehicle
      properties:
        id:
          type: string
          format: uuid
          example: 4406de91-aacc-4ffa-98bf-b02eb2a30e45
          description: An identifier used to refrence this vehicle
        make:
          type: string
          description: The company that produces this vehicle
          example: peugeot
        model:
          type: string
          description: The model of this vehicle
          example: '5008'
        yearOfManufacture:
          type: integer
          description: The year this vehicle was created
          minimum: 0
          maximum: 9999
        passengerCount:
          default: 4
          description: The amount of passengers this vehicle can carry
          example: 7
          type: integer
        CO2Emissions:
          type: number
          default: 0
          description: CO2Emissions per gram per mile
          example: 107
        doors:
          type: integer
          default: 3
          format: int32
          description: The amount of doors this vehicle has
      required:
        - id
        - make
        - model
        - yearOfManufacture
      x-tags:
        - Vehicle type
    Vehicle:
      title: Vehicle
      type: object
      description: Represents a vehicle in the system
      x-examples: {}
      properties:
        id:
          type: string
          description: A identifier used to represent this vehicle
          format: uuid
        driverId:
          type: string
          format: uuid
          description: The driver who has been issued this vehicle
        vehicleTypeId:
          type: string
          format: uuid
          description: A refrence number to the type of vehicle this represents
        businessId:
          type: string
          format: uuid
          description: The id of the business this belongs to
        plateNumber:
          type: integer
          format: int32
          description: The platenumber of this vehicle
        millage:
          type: integer
          format: int64
          description: The millage this vehicle has currently done
        MOTExpiry:
          type: string
          format: date
          description: The date that the MOT expires
        plateExpiry:
          type: string
          format: date
          description: The date that the plate expires
        insuranceExpiry:
          type: string
          format: date
          description: The date the insurance expires
        roadTaxExpiry:
          type: string
          format: date
          description: The date the road tax expires
        color:
          type: string
          example: Blue
          description: The color of the vehicle
      required:
        - id
        - driverId
        - vehicleTypeId
        - businessId
        - plateNumber
        - millage
        - color
      x-tags:
        - Vehicle
    VehicleForm:
      title: VehicleForm
      type: object
      description: Creates a new vehicle resource
      x-examples:
        Basic example:
          driverId: 828b7f7b-55c6-4515-8f3d-ff15b3ad99f4
          vehicleTypeId: ec907f5a-9574-4543-b161-0686f390fa64
          plateNumber: 4823
          color: Blue
      properties:
        driverId:
          type: string
          description: The driver who has been issued this vehicle
          format: uuid
          example: f04e5c3a-08a1-40d4-92e5-38b7264cf18b
        vehicleTypeId:
          type: string
          description: A refrence number to the type of vehicle this represents
          format: uuid
          example: b41272fd-388c-4034-aa30-92a7b144e658
        plateNumber:
          type: integer
          description: The platenumber of this vehicle
          format: int32
          example: 4854
        millage:
          type: integer
          default: 0
          description: The millage this vehicle has currently done
          example: 100000
          minimum: 0
        MOTExpiry:
          type: string
          format: date
          description: The date that the MOT expires
        plateExpiry:
          type: string
          format: date
          description: The date that the plate expires
        insuranceExpiry:
          type: string
          format: date
          description: The date the insurance expires
        roadTaxExpiry:
          type: string
          format: date
          description: The date the road tax expires
        color:
          type: string
          description: The color of the vehicle
          example: Blue
      required:
        - driverId
        - vehicleTypeId
        - plateNumber
        - color
      x-tags:
        - Vehicle
    VehicleTypeForm:
      title: VehicleType
      type: object
      description: The specification of a vehicle
      x-examples:
        Basic example:
          make: peugeot
          model: '5008'
          yearOfManufacture: 2020
      properties:
        make:
          type: string
          description: The company that produces this vehicle
          example: peugeot
        model:
          type: string
          description: The model of this vehicle
          example: '5008'
        yearOfManufacture:
          type: integer
          description: The year this vehicle was created
          example: 2020
          minimum: 0
          maximum: 9999
        passengerCount:
          default: 4
          description: The amount of passengers this vehicle can carry
          example: null
          type: integer
        CO2Emissions:
          type: number
          default: 0
          description: CO2Emissions per gram per mile
          example: 107
        doors:
          type: integer
          default: 3
          format: int32
          description: The amount of doors this vehicle has
      required:
        - make
        - model
        - yearOfManufacture
      x-tags:
        - Vehicle type
    VehicleUpdateForm:
      title: VehicleUpdateForm
      type: object
      description: Updates a vehicle
      x-examples:
        Basic example:
          driverId: 828b7f7b-55c6-4515-8f3d-ff15b3ad99f4
          vehicleTypeId: ec907f5a-9574-4543-b161-0686f390fa64
          plateNumber: 4823
          color: Blue
      x-tags:
        - Vehicle
      properties:
        driverId:
          type: string
          description: The driver who has been issued this vehicle
          format: uuid
          example: f04e5c3a-08a1-40d4-92e5-38b7264cf18b
        plateNumber:
          type: integer
          description: The platenumber of this vehicle
          format: int32
          example: 4854
        millage:
          type: integer
          default: 0
          description: The millage this vehicle has currently done
          example: 100000
          minimum: 0
        MOTExpiry:
          type: string
          format: date
          description: The date that the MOT expires
        plateExpiry:
          type: string
          format: date
          description: The date that the plate expires
        insuranceExpiry:
          type: string
          format: date
          description: The date the insurance expires
        roadTaxExpiry:
          type: string
          format: date
          description: The date the road tax expires
        color:
          type: string
          description: The color of the vehicle
          example: Blue
    VehicleTypeUpdateForm:
      title: VehicleTypeUpdateForm
      type: object
      description: The specification of a vehicle
      x-examples:
        Basic example:
          make: peugeot
          model: '5008'
          yearOfManufacture: 2020
      x-tags:
        - Vehicle type
      properties:
        make:
          type: string
          description: The company that produces this vehicle
          example: peugeot
        model:
          type: string
          description: The model of this vehicle
          example: '5008'
        yearOfManufacture:
          type: integer
          description: The year this vehicle was created
          example: 2020
          minimum: 0
          maximum: 9999
        passengerCount:
          default: 4
          description: The amount of passengers this vehicle can carry
          example: null
          type: integer
        CO2Emissions:
          type: number
          default: 0
          description: CO2Emissions per gram per mile
          example: 107
        doors:
          type: integer
          default: 3
          format: int32
          description: The amount of doors this vehicle has
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: A JWT key provided by the authorisation service
